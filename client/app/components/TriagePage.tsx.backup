'use client';

import { useState, useEffect } from 'react';
import { 
  RefreshCw, Calendar, AlertTriangle, Clock, 
  ChevronDown, ChevronUp, Plus, Brain, Zap,
  Mail, User, Tag, ArrowRight, Sparkles, MessageSquare,
  Phone, Link, CheckCircle, Check, X, Filter, Eye, EyeOff
} from 'lucide-react';

interface EmailThread {
  id: string;
  subject: string;
  from: string;
  snippet: string;
  date: string;
  priority_score: number;
  labels: string[];
  state?: {
    acknowledged?: boolean;
    analyzed?: boolean;
    tasks_added?: string[];
  };
}

interface TriagePageProps {
  onAddToTodo: (items: any[], threadId?: string) => Promise<void>;
}

export default function TriagePage({ onAddToTodo }: TriagePageProps) {
  const [threads, setThreads] = useState<EmailThread[]>([]);
  const [loading, setLoading] = useState(true);
  const [analyzing, setAnalyzing] = useState(false);
  const [expandedThread, setExpandedThread] = useState<string | null>(null);
  const [analyses, setAnalyses] = useState<Map<string, any>>(new Map());
  const [timeRange, setTimeRange] = useState('today');
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [dateFrom, setDateFrom] = useState('');
  const [dateTo, setDateTo] = useState('');
  const [showDigest, setShowDigest] = useState(false);
  const [digest, setDigest] = useState<string>('');
  const [hideAcknowledged, setHideAcknowledged] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null);
  const [authUrl, setAuthUrl] = useState<string>('');

  // Check authentication status
  const checkAuth = async () => {
    try {
      const params = new URLSearchParams({
        watched_only: 'true',
        priority_sort: 'true',
        max_results: '1',
        time_range: timeRange
      });
      
      const response = await fetch(`/api/backend/threads?${params}`);
      
      if (response.status === 401) {
        setIsAuthenticated(false);
        // Get auth URL
        const authResponse = await fetch('/api/backend/auth/url');
        const authData = await authResponse.json();
        setAuthUrl(authData.auth_url);
        setLoading(false);
        return false;
      }
      
      setIsAuthenticated(true);
      return true;
    } catch (error) {
      console.error('Auth check failed:', error);
      setIsAuthenticated(false);
      setLoading(false);
      return false;
    }
  };

  // Fetch threads
  const fetchThreads = async () => {
    setLoading(true);
    try {
      const params = new URLSearchParams({
        watched_only: 'true',
        priority_sort: 'true',
        max_results: '20',
        time_range: timeRange
      });
      
      const response = await fetch(`/api/backend/threads?${params}`);
      
      if (response.status === 401) {
        setIsAuthenticated(false);
        setLoading(false);
        return;
      }
      
      const data = await response.json();
      setThreads(data.threads || []);
    } catch (error) {
      console.error('Failed to fetch threads:', error);
    } finally {
      setLoading(false);
    }
  };

  // Get smart AI analysis - OPTIMIZED: Don't refetch all threads
  const analyzeThread = async (threadId: string) => {
    setAnalyzing(true);
    try {
      const response = await fetch('/api/backend/smart-triage', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ thread_id: threadId })
      });
      
      const data = await response.json();
      setAnalyses(prev => new Map(prev).set(threadId, data));
      setExpandedThread(threadId);
      
      // OPTIMIZED: Update just this thread's state instead of refetching everything
      setThreads(prev => prev.map(thread => 
        thread.id === threadId 
          ? { ...thread, state: { ...thread.state, analyzed: true } }
          : thread
      ));
    } catch (error) {
      console.error('Failed to analyze thread:', error);
    } finally {
      setAnalyzing(false);
    }
  };

  // Acknowledge email - OPTIMIZED: Don't refetch all threads
  const acknowledgeEmail = async (threadId: string) => {
    try {
      const response = await fetch('/api/backend/state/acknowledge', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ thread_id: threadId })
      });
      
      if (response.ok) {
        // OPTIMIZED: Update just this thread's state
        setThreads(prev => prev.map(thread => 
          thread.id === threadId 
            ? { ...thread, state: { ...thread.state, acknowledged: true } }
            : thread
        ));
      }
    } catch (error) {
      console.error('Failed to acknowledge email:', error);
    }
  };

  // Get daily digest
  const fetchDigest = async () => {
    try {
      const response = await fetch('/api/backend/daily-digest');
      const data = await response.json();
      setDigest(data.digest);
      setShowDigest(true);
    } catch (error) {
      console.error('Failed to get digest:', error);
    }
  };

  useEffect(() => {
    const initAuth = async () => {
      const authenticated = await checkAuth();
      if (authenticated) {
        fetchThreads();
        fetchDigest();
      }
    };
    initAuth();
  }, [timeRange]);

  // Parse email
  const parseEmail = (from: string) => {
    if (!from) return { name: 'Unknown', email: '' };
    const match = from.match(/(.*?)<(.+?)>/);
    if (match) {
      return { name: match[1].trim() || match[2], email: match[2] };
    }
    return { name: from, email: from };
  };

  // Get priority indicator
  const getPriorityIndicator = (score: number) => {
    if (score >= 75) return { icon: 'ðŸ”´', color: 'text-red-600', bg: 'bg-red-50' };
    if (score >= 50) return { icon: 'ðŸŸ¡', color: 'text-orange-600', bg: 'bg-orange-50' };
    if (score >= 25) return { icon: 'ðŸŸ¢', color: 'text-green-600', bg: 'bg-green-50' };
    return { icon: 'âšª', color: 'text-gray-600', bg: 'bg-white' };
  };

  // Make URLs clickable in text
  const linkifyText = (text: string) => {
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    const parts = text.split(urlRegex);
    
    return parts.map((part, index) => {
      if (part.match(urlRegex)) {
        return (
          <a
            key={index}
            href={part}
            target="_blank"
            rel="noopener noreferrer"
            className="text-blue-600 hover:text-blue-800 underline"
          >
            {part}
          </a>
        );
      }
      return part;
    });
  };

  // Add individual task - OPTIMIZED: Update thread state directly
  const addSingleTask = async (task: any, threadId: string) => {
    await onAddToTodo([task], threadId);
    
    // Update thread to show task was added
    setThreads(prev => prev.map(thread => {
      if (thread.id === threadId) {
        const currentTasks = thread.state?.tasks_added || [];
        return {
          ...thread,
          state: {
            ...thread.state,
            tasks_added: [...currentTasks, task.action]
          }
        };
      }
      return thread;
    }));
  };

  // Add all tasks - OPTIMIZED: Update thread state directly
  const addAllTasks = async (tasks: any[], threadId: string) => {
    await onAddToTodo(tasks, threadId);
    
    // Update thread to show all tasks were added
    setThreads(prev => prev.map(thread => {
      if (thread.id === threadId) {
        return {
          ...thread,
          state: {
            ...thread.state,
            tasks_added: tasks.map(t => t.action)
          }
        };
      }
      return thread;
    }));
  };

  // Filter threads based on acknowledged status
  const visibleThreads = hideAcknowledged 
    ? threads.filter(t => !t.state?.acknowledged)
    : threads;

  // Show login screen if not authenticated
  if (isAuthenticated === false) {
    return (
      <div className="space-y-6">
        <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-12 text-center max-w-2xl mx-auto">
          <div className="mb-6">
            <div className="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-r from-red-500 to-orange-500 rounded-full mb-4">
              <Mail className="h-10 w-10 text-white" />
            </div>
            <h2 className="text-3xl font-bold text-gray-900 mb-2">Connect Your Gmail</h2>
            <p className="text-gray-600 mb-8">
              Sign in with Google to enable AI-powered email triage and smart inbox management.
            </p>
          </div>
          
          <div className="space-y-4">
            <a
              href={authUrl}
              className="inline-flex items-center justify-center px-8 py-4 bg-gradient-to-r from-red-500 to-orange-500 text-white font-bold rounded-lg hover:from-red-600 hover:to-orange-600 shadow-lg transform hover:scale-105 transition-all space-x-3"
            >
              <Mail className="h-6 w-6" />
              <span>Sign in with Google</span>
            </a>
            
            <div className="mt-8 p-6 bg-gray-50 rounded-lg text-left">
              <h3 className="font-semibold text-gray-900 mb-3">What you'll get:</h3>
              <ul className="space-y-2 text-sm text-gray-700">
                <li className="flex items-start">
                  <CheckCircle className="h-5 w-5 text-green-500 mr-2 flex-shrink-0 mt-0.5" />
                  <span><strong>AI Email Analysis:</strong> GPT-4 understands context and extracts action items</span>
                </li>
                <li className="flex items-start">
                  <CheckCircle className="h-5 w-5 text-green-500 mr-2 flex-shrink-0 mt-0.5" />
                  <span><strong>Priority Scoring:</strong> Automatically sorts emails by importance</span>
                </li>
                <li className="flex items-start">
                  <CheckCircle className="h-5 w-5 text-green-500 mr-2 flex-shrink-0 mt-0.5" />
                  <span><strong>Smart Task Creation:</strong> One-click to add emails to your todo list</span>
                </li>
                <li className="flex items-start">
                  <CheckCircle className="h-5 w-5 text-green-500 mr-2 flex-shrink-0 mt-0.5" />
                  <span><strong>Daily Digest:</strong> Get a summary of what needs your attention</span>
                </li>
              </ul>
            </div>
            
            <p className="text-xs text-gray-500 mt-6">
              ðŸ”’ Your data is secure. We only access emails you choose to analyze.
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Daily Digest Banner */}
      {showDigest && digest && (
        <div className="bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-xl shadow-lg p-6">
          <div className="flex items-start justify-between">
            <div className="flex-1">
              <h3 className="text-xl font-bold mb-3 flex items-center">
                <Sparkles className="h-6 w-6 mr-2" />
                Your Daily Operations Brief
              </h3>
              <div className="text-sm opacity-90 whitespace-pre-wrap">
                {linkifyText(digest)}
              </div>
            </div>
            <button
              onClick={() => setShowDigest(false)}
              className="text-white/70 hover:text-white"
            >
              <X className="h-5 w-5" />
            </button>
          </div>
        </div>
      )}

      {/* Smart Actions Bar */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4">
        <div className="flex items-center justify-between flex-wrap gap-4">
          <div className="flex items-center space-x-4">
            <h2 className="text-lg font-bold text-gray-900">Smart Email Triage</h2>
            
            <div className="flex items-center space-x-2 text-sm text-gray-600">
              <MessageSquare className="h-4 w-4" />
              <span>AI understands context, not just keywords</span>
            </div>
          </div>

          <div className="flex items-center space-x-2">
            {/* TIME RANGE FILTER */}
            <select
              value={timeRange}
              onChange={(e) => setTimeRange(e.target.value)}
              className="px-3 py-2 bg-white border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-purple-500"
            >
              <option value="today">ðŸ“… Today</option>
              <option value="yesterday">ðŸ“… Yesterday</option>
              <option value="week">ðŸ“… This Week</option>
              <option value="month">ðŸ“… This Month</option>
              <option value="all">ðŸ“… All Time</option>
            </select>

            {/* Hide Acknowledged Toggle */}
            <button
              onClick={() => setHideAcknowledged(!hideAcknowledged)}
              className={`px-3 py-2 rounded-lg font-medium text-sm flex items-center space-x-2 transition-colors ${
                hideAcknowledged 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
              }`}
            >
              {hideAcknowledged ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
              <span>{hideAcknowledged ? 'Show All' : 'Hide Acknowledged'}</span>
            </button>

            <button
              onClick={fetchDigest}
              className="px-3 py-2 bg-purple-100 text-purple-700 rounded-lg hover:bg-purple-200 font-medium text-sm"
            >
              Daily Brief
            </button>
            
            <button
              onClick={fetchThreads}
              className="p-2 hover:bg-gray-100 rounded-lg"
            >
              <RefreshCw className={`h-5 w-5 text-gray-600 ${loading ? 'animate-spin' : ''}`} />
            </button>
          </div>
        </div>
      </div>

      {/* Email List with Smart Analysis */}
      <div className="space-y-3">
        {loading ? (
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8 text-center">
            <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-2 text-gray-400" />
            <p className="text-gray-500">Loading emails...</p>
          </div>
        ) : visibleThreads.length === 0 ? (
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8 text-center">
            <CheckCircle className="h-12 w-12 mx-auto mb-3 text-green-500" />
            <p className="text-lg font-medium text-gray-700">
              {hideAcknowledged && threads.length > 0 
                ? 'All emails acknowledged!' 
                : 'All caught up!'}
            </p>
            <p className="text-sm text-gray-500 mt-2">
              {hideAcknowledged && threads.length > 0
                ? 'Click "Show All" to see acknowledged emails'
                : 'No urgent emails need your attention'}
            </p>
          </div>
        ) : (
          visibleThreads.map((thread) => {
            const { name, email } = parseEmail(thread.from);
            const isExpanded = expandedThread === thread.id;
            const analysis = analyses.get(thread.id);
            const priority = getPriorityIndicator(thread.priority_score);
            const isUnread = thread.labels.includes('UNREAD');
            const isAcknowledged = thread.state?.acknowledged || false;
            const isAnalyzed = thread.state?.analyzed || false;
            const hasTasksAdded = (thread.state?.tasks_added?.length || 0) > 0;

            return (
              <div
                key={thread.id}
                className={`bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden transition-all ${
                  isExpanded ? 'ring-2 ring-purple-500' : ''
                } ${isAcknowledged ? 'opacity-60' : ''}`}
              >
                <div className={`p-4 ${priority.bg}`}>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      {/* Priority and Status */}
                      <div className="flex items-center space-x-2 mb-2 flex-wrap gap-1">
                        <span className="text-2xl">{priority.icon}</span>
                        {isUnread && (
                          <span className="px-2 py-1 text-xs font-bold bg-blue-500 text-white rounded">
                            NEW
                          </span>
                        )}
                        {isAcknowledged && (
                          <span className="px-2 py-1 text-xs font-bold bg-green-500 text-white rounded flex items-center">
                            <Check className="h-3 w-3 mr-1" />
                            ACKNOWLEDGED
                          </span>
                        )}
                        {isAnalyzed && (
                          <span className="px-2 py-1 text-xs font-bold bg-purple-500 text-white rounded">
                            ANALYZED
                          </span>
                        )}
                        {hasTasksAdded && (
                          <span className="px-2 py-1 text-xs font-bold bg-blue-500 text-white rounded">
                            {thread.state?.tasks_added?.length} TASKS ADDED
                          </span>
                        )}
                        <span className="text-xs text-gray-500">
                          Score: {thread.priority_score}
                        </span>
                      </div>

                      {/* Sender */}
                      <div className="flex items-center space-x-2 mb-2">
                        <User className="h-4 w-4 text-gray-400" />
                        <span className="font-medium text-gray-900">{name}</span>
                        <span className="text-sm text-gray-500">{email}</span>
                      </div>

                      {/* Subject */}
                      <h3 className="font-semibold text-gray-900 mb-2">
                        {thread.subject || '(No subject)'}
                      </h3>

                      {/* Preview */}
                      {!isExpanded && (
                        <p className="text-sm text-gray-600 line-clamp-2">
                          {thread.snippet}
                        </p>
                      )}
                    </div>

                    {/* Quick Actions */}
                    <div className="flex flex-col space-y-2">
                      {!isAcknowledged && (
                        <button
                          onClick={() => acknowledgeEmail(thread.id)}
                          className="px-3 py-2 bg-green-100 text-green-700 text-sm font-medium rounded-lg hover:bg-green-200 flex items-center space-x-1"
                        >
                          <Check className="h-4 w-4" />
                          <span>Acknowledge</span>
                        </button>
                      )}
                      
                      <button
                        onClick={() => analyzeThread(thread.id)}
                        disabled={analyzing}
                        className="px-3 py-2 bg-gradient-to-r from-purple-500 to-blue-500 text-white text-sm font-medium rounded-lg hover:from-purple-600 hover:to-blue-600 flex items-center space-x-1 shadow-md disabled:opacity-50"
                      >
                        <Brain className="h-4 w-4" />
                        <span>AI Analysis</span>
                      </button>
                      
                      <button
                        onClick={() => setExpandedThread(isExpanded ? null : thread.id)}
                        className="p-2 bg-white border border-gray-200 rounded-lg hover:bg-gray-50"
                      >
                        {isExpanded ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
                      </button>
                    </div>
                  </div>

                  {/* Smart AI Analysis */}
                  {isExpanded && analysis && (
                    <div className="mt-6 pt-6 border-t border-gray-200">
                      <div className="bg-gradient-to-br from-purple-50 via-blue-50 to-pink-50 rounded-xl p-6 border border-purple-200">
                        <div className="flex items-center mb-4">
                          <div className="p-2 bg-purple-100 rounded-lg mr-3">
                            <Brain className="h-5 w-5 text-purple-600" />
                          </div>
                          <div>
                            <h4 className="font-bold text-gray-900">AI Assistant Analysis</h4>
                            <p className="text-xs text-gray-600">Understanding context, not just keywords</p>
                          </div>
                        </div>
                        
                        <div className="prose prose-sm max-w-none">
                          <div className="text-gray-800 whitespace-pre-wrap leading-relaxed">
                            {linkifyText(analysis.analysis)}
                          </div>
                        </div>

                        {/* Extracted Actions */}
                        {analysis.tasks && analysis.tasks.length > 0 && (
                          <div className="mt-6 pt-4 border-t border-purple-200">
                            <h5 className="text-sm font-bold text-gray-700 mb-3">Extracted Action Items:</h5>
                            <div className="space-y-2">
                              {analysis.tasks.map((task: any, idx: number) => (
                                <div key={idx} className="flex items-start space-x-2 bg-white rounded-lg p-3">
                                  <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
                                  <div className="flex-1 min-w-0">
                                    <p className="text-sm text-gray-800">{task.action}</p>
                                    <div className="flex items-center space-x-3 mt-1 flex-wrap">
                                      {task.due_date && (
                                        <span className="text-xs text-gray-500">
                                          <Calendar className="h-3 w-3 inline mr-1" />
                                          Due: {task.due_date}
                                        </span>
                                      )}
                                      {task.time_estimate && (
                                        <span className="text-xs text-gray-500">
                                          <Clock className="h-3 w-3 inline mr-1" />
                                          ~{task.time_estimate}
                                        </span>
                                      )}
                                    </div>
                                  </div>
                                  <button
                                    onClick={() => addSingleTask(task, thread.id)}
                                    className="px-2 py-1 bg-blue-500 hover:bg-blue-600 text-white text-xs font-medium rounded flex items-center space-x-1 flex-shrink-0"
                                  >
                                    <Plus className="h-3 w-3" />
                                    <span>Add</span>
                                  </button>
                                </div>
                              ))}
                            </div>
                            
                            <button
                              onClick={() => addAllTasks(analysis.tasks, thread.id)}
                              className="mt-4 w-full px-4 py-2 bg-green-500 hover:bg-green-600 text-white font-medium rounded-lg flex items-center justify-center space-x-2"
                            >
                              <Plus className="h-4 w-4" />
                              <span>Add All to Todo List</span>
                              <ArrowRight className="h-4 w-4" />
                            </button>
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            );
          })
        )}
      </div>
    </div>
  );
}
